Rimuoviamo completamente il vecchio modulo Lead e lo ricreiamo da zero con un boilerplate pulito. Ecco i passi e il comando univoco da dare a Replit:

# 1) Elimina tutto il codice esistente per i Lead
apply_patch << 'EOF'
*** Begin Patch
*** Delete File: server/routes/leads.js       # o la sezione pertinente in server/routes.ts
*** Delete File: server/postgresStorage.ts    # rimuovi i metodi createLead, getLead, updateLead, deleteLead
*** Delete File: client/src/components/modals/LeadModal.tsx
*** Delete File: client/src/hooks/useLeads.tsx
*** Delete File: client/src/pages/leads/[id].tsx
*** Delete File: client/src/pages/leads/index.tsx
*** End Patch
EOF

# 2) Crea da zero il nuovo scaffolding CRUD+Conversion per i Lead

# 2a) Aggiungi il routing in server/routes.ts
apply_patch << 'EOF'
*** Begin Patch
*** Update File: server/routes.ts
@@ // alla fine dei router
+// Lead CRUD + conversion
+router.get('/api/leads',       leadController.listLeads);
+router.get('/api/leads/:id',   leadController.getLead);
+router.post('/api/leads',      leadController.createLead);
+router.patch('/api/leads/:id', leadController.updateLead);
+router.delete('/api/leads/:id',leadController.deleteLead);
+router.post('/api/leads/:id/convert', leadController.convertLead);
*** End Patch
EOF

# 2b) Genera un nuovo file di controller server/controllers/leadController.js
apply_patch << 'EOF'
*** Begin Patch
*** Add File: server/controllers/leadController.js
+import storage from '../postgresStorage';
+
+export async function listLeads(req, res, next) {
+  const leads = await storage.getLeads();
+  res.json(leads);
+}
+export async function getLead(req, res, next) {
+  const lead = await storage.getLead(+req.params.id);
+  if (!lead) return res.sendStatus(404);
+  res.json(lead);
+}
+export async function createLead(req, res, next) {
+  const lead = await storage.createLead(req.body);
+  res.status(201).json(lead);
+}
+export async function updateLead(req, res, next) {
+  await storage.updateLead(+req.params.id, req.body);
+  res.sendStatus(204);
+}
+export async function deleteLead(req, res, next) {
+  await storage.deleteLead(+req.params.id);
+  res.sendStatus(204);
+}
+export async function convertLead(req, res, next) {
+  const { companyId, contact } = await storage.convertLead(+req.params.id);
+  res.json({ companyId, contact });
+}
*** End Patch
EOF

# 2c) Aggiungi i metodi storage in server/postgresStorage.ts
apply_patch << 'EOF'
*** Begin Patch
*** Update File: server/postgresStorage.ts
@@ // add after existing methods
+// Lead methods
+async function getLeads() {
+  const { rows } = await client.query(
+    `SELECT id, first_name AS "firstName", last_name AS "lastName",
+            company_name AS company, email, phone, status
+       FROM leads ORDER BY id DESC`
+  );
+  return rows;
+}
+async function getLead(id) {
+  const { rows } = await client.query(
+    `SELECT id, first_name AS "firstName", last_name AS "lastName",
+            company_name AS company, email, phone, status
+       FROM leads WHERE id=$1`, [id]
+  );
+  return rows[0];
+}
+async function createLead({ firstName, lastName, company, email, phone, status }) {
+  const { rows } = await client.query(
+    `INSERT INTO leads(first_name, last_name, company_name, email, phone, status)
+      VALUES($1,$2,$3,$4,$5,$6)
+      RETURNING id, first_name AS "firstName", last_name AS "lastName",
+                company_name AS company, email, phone, status`,
+    [firstName, lastName, company, email, phone, status]
+  );
+  return rows[0];
+}
+async function updateLead(id, updates) {
+  const fields = [], vals = [];
+  if (updates.firstName) fields.push(`first_name=$${vals.push(updates.firstName)}`);
+  if (updates.lastName)  fields.push(`last_name=$${vals.push(updates.lastName)}`);
+  if (updates.company)   fields.push(`company_name=$${vals.push(updates.company)}`);
+  if (updates.email)     fields.push(`email=$${vals.push(updates.email)}`);
+  if (updates.phone)     fields.push(`phone=$${vals.push(updates.phone)}`);
+  if (updates.status)    fields.push(`status=$${vals.push(updates.status)}`);
+  if (!fields.length) return;
+  await client.query(
+    `UPDATE leads SET ${fields.join(',')} WHERE id=$${vals.push(id)}`,
+    vals
+  );
+}
+async function deleteLead(id) {
+  await client.query(`DELETE FROM leads WHERE id=$1`, [id]);
+}
+// Convert lead â†’ company+contact
+async function convertLead(id) {
+  const lead = await getLead(id);
+  let companyId = null;
+  if (lead.company) {
+    const comp = await client.query(
+      `INSERT INTO companies(name) VALUES($1) RETURNING id`,
+      [lead.company]
+    );
+    companyId = comp.rows[0].id;
+  }
+  const { rows } = await client.query(
+    `INSERT INTO contacts(name,email,phone,company_id)
+      VALUES($1,$2,$3,$4) RETURNING *`,
+    [`${lead.firstName} ${lead.lastName}`, lead.email, lead.phone, companyId]
+  );
+  await updateLead(id, { status: 'converted' });
+  return { companyId, contact: rows[0] };
+}
+
+// export them
+export {
+  getLeads, getLead, createLead, updateLead, deleteLead, convertLead
+};
*** End Patch
EOF

# 2d) Rigenera i migration/seed se necessario per la tabella leads
npm run db:migrate && npm run db:seed

# 3) Ricrea il frontend da zero
bash << 'EOF'
# rimuovi vecchi componenti
rm -rf client/src/components/leads
# crea nuovo componente LeadList e LeadModal
cat > client/src/components/leads/LeadList.tsx << 'EOC'
import { useEffect, useState } from 'react';
export default function LeadList() {
  const [leads, setLeads] = useState([]);
  useEffect(() => {
    fetch('/api/leads').then(r=>r.json()).then(setLeads);
  }, []);
  return (
    <div>
      <h2>Leads</h2>
      <table> {/* ... */}</table>
    </div>
  );
}
EOC
# crea LeadModal.tsx analogamente...
EOF

# 4) Riavvia il frontend
npm run dev

Questo rimuove completamente il vecchio Lead, ne ricrea uno nuovo con routing, controller, storage e componenti puliti e sincronizzati col database.